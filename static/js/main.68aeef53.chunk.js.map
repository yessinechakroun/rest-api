{"version":3,"sources":["Components/addContact.jsx","Components/EditContact.jsx","Components/ContactList.js","App.js","serviceWorker.js","index.js"],"names":["AddContact","state","name","phone","email","handleChange","e","setState","target","value","handleSumbit","Axios","post","type","placeholder","onChange","this","to","onClick","Component","EditContact","props","put","match","params","id","console","log","ContactList","delete","then","filter","el","_id","get","res","data","catch","err","PrevPrpos","PrevState","length","map","key","App","path","render","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68aeef53.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: \"\",\r\n        phone: '',\r\n        email: \"\"\r\n\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handleSumbit=()=> {\r\n       Axios.post('http://localhost:3008/add_Contact',{...this.state})\r\n    }\r\n    render() {\r\n        return (<div>\r\n            <input type=\"text\" placeholder='name' name=\"name\" onChange={this.handleChange} />\r\n            <input type=\"text\" placeholder='phone' name='phone' onChange={this.handleChange} />\r\n            <input type=\"text\" placeholder='email' name=\"email\" onChange={this.handleChange} />\r\n         <Link to='/Contacts'><button onClick={this.handleSumbit}>ADD Contact</button></Link>   \r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n    constructor(props) {\r\n        super(props) ;\r\n        this.state = {\r\n            name: \"\",\r\n            phone: '',\r\n            email: \"\"\r\n\r\n        }\r\n    }\r\n    \r\n    componentDidMount () {\r\n\r\n        let params= this.props.match.params\r\n        this.setState({\r\n            name:params.name , \r\n            phone:params.phone , \r\n            email:params.email\r\n        })\r\n    }\r\n    \r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n\r\n    handleSumbit = () => {\r\n        Axios.put('http://localhost:3008/edit_Contact/'+this.props.match.params.id, { ...this.state })\r\n    }\r\n    render() {\r\n        console.log(this.props)\r\n        return (<div>\r\n            <input type=\"text\" value={this.state.name} placeholder='name' name=\"name\" onChange={this.handleChange} />\r\n            <input type=\"text\" value={this.state.phone} placeholder='phone' name='phone' onChange={this.handleChange} />\r\n            <input type=\"text\"  value={this.state.email}placeholder='email' name=\"email\" onChange={this.handleChange} />\r\n            <button onClick={this.handleSumbit}>Edit Contact</button>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default EditContact;","import React, { Component, Fragment } from 'react';\r\nimport Axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nclass ContactList extends Component {\r\n    state = {\r\n        ContactList: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('componentDidMount')\r\n        Axios.get('http://localhost:3008/Contacts').then(res => this.setState({ ContactList: res.data })).catch((err) => console.log(err))\r\n    }\r\n\r\n    componentDidUpdate(PrevPrpos,PrevState) {\r\n        console.log(\"componentDidUpdate\")\r\n        console.log(PrevState)\r\n        if(PrevState.ContactList.length !==this.state.ContactList.length) \r\n        Axios.get('http://localhost:3008/Contacts').then(res => this.setState({ ContactList: res.data })).catch((err) => console.log(err))\r\n\r\n    }\r\n\r\n\r\n\r\n    delete=(id)=>{\r\n\r\n        Axios.delete('http://localhost:3008/delete_Contact/'+id)\r\n        .then(this.setState({\r\n            ContactList: this.state.ContactList.filter(el=>el._id !==id)\r\n        }))\r\n    }\r\n\r\n \r\n\r\n    render() {\r\n        return (<Fragment>\r\n            {this.state.ContactList.map(el => <div key={el._id}>\r\n                <span>{el.name}</span>\r\n                <span>{el.phone}</span>\r\n                <span>{el.email}</span>\r\n                <Link to={`/Edit_Contact/${el._id}/${el.name}/${el.phone}/${el.email}`}>\r\n                    <button >Edit</button>\r\n                </Link>\r\n\r\n                <button onClick={()=>this.delete(el._id)}>Delete</button>\r\n            </div>)}\r\n\r\n\r\n        </Fragment>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactList;","import React from 'react';\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport AddContact from './Components/addContact';\nimport EditContact from './Components/EditContact';\nimport ContactList from './Components/ContactList';\n\n\n\n\nconst App = () => {\n  return (<BrowserRouter>\n    <Route path=\"/\" render={() => <div>\n      <Link to =\"/add_Contact\">\n        <button>ADD Contact </button>\n      </Link>\n      <Link to=\"/Contacts\">\n        <button>To Contact List</button>\n      </Link>\n\n\n    </div>} />\n    <Route path=\"/Contacts\" component={ContactList}/>\n    <Route path=\"/add_Contact\" component={AddContact} />\n    <Route path=\"/Edit_Contact/:id/:name/:phone/:email\" component={EditContact} />\n\n\n\n  </BrowserRouter>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}